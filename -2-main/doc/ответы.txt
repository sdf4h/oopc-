▎Основная проблема в ООП

Объектно-ориентированное программирование (ООП) нацелено на решение проблемы сложности программного обеспечения путем моделирования реального мира через использование объектов. Это позволяет программистам структурировать код так, чтобы было легче управлять и поддерживать, улучшая модульность и повторное использование кода.

▎Инкапсуляция и качество ПО

Инкапсуляция способствует улучшению качества программного обеспечения, скрывая внутреннюю реализацию объекта и предоставляя только необходимый интерфейс для взаимодействия. Это защищает данные от нежелательных изменений и упрощает модификацию и отладку, так как изменения в одной части программы не влияют на другие.

▎Абстракция данных

Абстракция данных в ООП заключается в создании простого интерфейса для работы с данными, скрывая детали их реализации. Отличие от конкретной реализации в том, что пользователь взаимодействует только с интерфейсом, не зная, как данные обрабатываются внутри объекта.

▎Преимущества инкапсуляции

Основные преимущества инкапсуляции данных включают:
- Улучшение управления данными и их защиты.
- Упрощение изменений и сопровождения кода.
- Уменьшение зависимости между компонентами системы, что делает ее более устойчивой к изменениям.

▎Абстрактный тип данных (АТД)

Абстрактный тип данных (АТД) - это модель данных, которая определяет поведение данных через интерфейс, не раскрывая их внутреннюю структуру. В ООП это используется для создания объектов, представляющих сложные структуры с четко определенными методами взаимодействия.

▎Принцип DRY

Принцип "не повторяйся" (DRY) направлен на уменьшение дублирования кода путем выделения повторяющихся фрагментов в отдельные методы или классы. Он тесно связан с ООП, так как облегчает переиспользование кода и улучшает его читабельность.

▎Проблемы процедурного программирования

В процедурном программировании часто возникают проблемы с модульностью и повторным использованием кода, так как оно ориентировано на последовательное выполнение операций. Это может привести к дублированию кода и сложностям в его сопровождении.

▎Роль абстрагирования

Абстрагирование помогает в проектировании гибких и адаптируемых систем, позволяя сосредоточиться на высокоуровневых проблемах и оставляя детали реализации до будущих этапов. Оно улучшает модульность и облегчает изменение и расширение функциональности.

▎Конструктор и АТД

Конструктор в контексте абстрактных типов данных и классов в ООП используется для инициализации объекта. Он задает начальное состояние объекта, устанавливает значения по умолчанию и подготавливает объект к использованию.

▎Пример использования абстракции

Использование абстракции данных в проектировании базы данных позволяет скрыть сложность SQL-запросов, предоставляя интерфейс в виде функций для работы с данными, как в библиотеке ORM.

▎Инкапсуляция и пример

Инкапсуляция в ООП - это техника скрытия внутренних данных объекта и реализации его методов. Пример: класс "Банк" может иметь приватное поле "баланс" и публичный метод "пополнитьСчет", контролирующий изменения баланса.

▎Класс vs Структура в C++

В C++ класс и структура (struct) могут иметь различия в модификаторах доступа. По умолчанию члены структуры являются публичными, а члены класса - приватными.

▎Значение модификатора private

Использование модификатора доступа private для полей класса важно для защиты данных от внешнего вмешательства и ошибок. Это позволяет манипулировать данными только через публичные методы, обеспечивающие контроль за их изменением.

▎Принцип скрытия информации

Принцип скрытия информации (information hiding) заключается в ограничении доступа к внутренним данным объекта, позволяя управлять ими только через определенные интерфейсы. Пример: скрытие деталей реализации сортировки массива, предоставляя только методы для сортировки.

▎Методы геттеры и сеттеры

Методы геттеры и сеттеры используются для управления доступом к полям класса. Геттер возвращает значение приватного поля, а сеттер устанавливает его после необходимых проверок.

▎Константные методы в C++
Константные методы в C++ помечаются как const, чтобы указать, что они не изменяют состояние объекта. Это важно для обеспечения безопасности данных и позволяет использовать объект в контексте, где модификации нежелательны.

▎Ссылки на константы

Ссылки на константные объекты вместо копирования объектов в функции следует использовать, чтобы избежать ненужного дублирования и для увеличения скорости выполнения программы. Это полезно, когда объекты необх"олжима"в"иев"'щим"' танстку". 

▎Использование константных ссылок

Преимущества использования константных ссылок в C++ при передаче объектов в функции включают в себя: уменьшение накладных расходов на копирование объектов и защиту от изменений переданного объекта внутри функции.

▎Обычный метод vs const метод

Разница между обычным методом и методом, помеченным как const, заключается в ограничении прав досту